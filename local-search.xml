<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微积分期中总结</title>
    <link href="/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/"/>
    <url>/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="微分学">微分学</h1><ol type="1"><li>拉格朗日中值：在(a,b)的区间内，定义了<span class="math inline">\(f(x)\)</span>，则有<span class="math inline">\(f(x_1)-f(x_2)=f&#39;(\xi)(x_1-x_2),\xi\in(x_1,x_2)\)</span></li><li>若<span class="math inline">\(f&#39;&#39;_{xy}(x,y)与f&#39;&#39;_{yx}(x,y)在(x,y)处皆连续，则f&#39;&#39;_{xy}(x,y)=f&#39;&#39;_{yx}(x,y)在(x,y)，与求导次序无关\)</span></li><li>全微分(用来代替全增量)：有函数<span class="math inline">\(z=f(x,y)\)</span>，点P(x,y)，若<span class="math inline">\(\Delta z=f(x+\Delta x,y+\Deltay)\)</span>可表示为<span class="math inline">\(\Delta z=A\Deltax+B\Delta y+o(\rho)\)</span>，其中<span class="math inline">\(A=\frac{\partial z}{\partial x},B=\frac{\partialz}{\partial y},\rho=\sqrt{(\Delta x)^2+(\Delta y)^2}\)</span>,则<span class="math inline">\(f(x,y)\)</span>在<span class="math inline">\((x,y)\)</span>处可微<span class="math inline">\(\;\)</span>,其中全微分为其线性部分<span class="math inline">\(dz=A\Delta x+B\Delta y\)</span></li><li>可微则<span class="math inline">\(z=f(x,y)\)</span>可偏导,且偏导在(x,y)处连续,同时称为连续可微例子:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111350391-1777238050.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111358851-1283366244.png" alt="img"></li><li>隐函数的偏导数:</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学期中总结</title>
    <link href="/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="命题逻辑">命题逻辑</h1><h2 id="命题表达式">命题表达式</h2><p><span class="math inline">\(p\bigvee q,p\bigwedge q,\)</span> <span class="math inline">\(p\rightarrow q=\neg{p}\bigveeq=\neg{q}\rightarrow\neg{p}\)</span>, 其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230414234921637-1080611651.png" alt="img"> <span class="math inline">\(p\leftrightarrowq=(p\rightarrow q)\bigwedge(q\rightarrow p)\)</span> 其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001003795-592965966.png" alt="img"> 运算符优先级：<span class="math inline">\(`\neg`&gt;`\bigwedge`&gt;`\bigvee`&gt;`\rightarrow`&gt;`\leftrightarrow`\)</span>## 将自然语言翻译成命题表达式 一个例子：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001117304-300645479.png" alt="img"> ## 命题表达式的真值表以及永真式、矛盾式与可能式 ## 逻辑等价<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001729745-1806161999.png" alt="img"> ## 常用的逻辑等价 <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001835667-657307310.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415002002556-960422294.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL模板库</title>
    <link href="/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器于iterator头文件中">迭代器（于<code>&lt;iterator&gt;</code>头文件中）</h1><h2 id="种类">种类：</h2><p>1):正向迭代器，定义如下:<br>&gt;<code>容器类名::iterator  迭代器名;</code></p><p>2):常量迭代器，定义如下:&gt;<code>容器类名::const_iterator  迭代器名;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构</title>
    <link href="/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找">二分查找：</h1><h2 id="模板①">模板①：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    right = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    left = middle + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125; <br><span class="hljs-comment">//注意是先改变右值</span><br></code></pre></td></tr></table></figure><h2 id="模板②">模板②：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-comment">// +1是为了让相除结果向上取整，这个地方就是两套模板的区别之一</span><br>  <span class="hljs-type">int</span> middle = left + (right - left + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    left = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    right = middle - <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;  <br><span class="hljs-comment">//注意是先改变左值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="例一最长不下降子序列">例一：最长不下降子序列</h1><h2 id="方法一时间复杂度onlogn">方法一：<a href="https://www.cnblogs.com/itlqs/p/5743114.html">时间复杂度O(nlogn)</a></h2><p><strong>代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最长不下降子序列nlogn  Song </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">40005</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">40005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span>)  <span class="hljs-comment">//0个元素特判一下 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    d[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];  <span class="hljs-comment">//初始化 </span><br>    <span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i]&gt;=d[len]) d[++len]=a[i];  <span class="hljs-comment">//如果可以接在len后面就接上，如果是最长上升子序列，这里变成&gt; </span><br>        <span class="hljs-keyword">else</span>  <span class="hljs-comment">//否则就找一个最该替换的替换掉 </span><br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-built_in">upper_bound</span>(d+<span class="hljs-number">1</span>,d+len+<span class="hljs-number">1</span>,a[i])-d;  <span class="hljs-comment">//找到第一个大于它的d的下标，如果是最长上升子序列，这里变成lower_bound </span><br>            d[j]=a[i]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> &gt; 例子：1,7,6,2,3,4<br>&gt; 结果：4<br>&gt; 解释：最长不下降子序列为1,2,3,4</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/17/hello-world/"/>
    <url>/2023/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>New Article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
