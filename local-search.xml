<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微积分期中总结</title>
    <link href="/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/"/>
    <url>/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="微分学">微分学</h1><ol type="1"><li>拉格朗日中值：在(a,b)的区间内，定义了<span class="math inline">\(f(x)\)</span>，则有<span class="math inline">\(f(x_1)-f(x_2)=f&#39;(\xi)(x_1-x_2),\xi\in(x_1,x_2)\)</span></li><li>若<span class="math inline">\(f&#39;&#39;_{xy}(x,y)与f&#39;&#39;_{yx}(x,y)在(x,y)处皆连续，则f&#39;&#39;_{xy}(x,y)=f&#39;&#39;_{yx}(x,y)在(x,y)，与求导次序无关\)</span></li><li>全微分(用来代替全增量)：有函数<span class="math inline">\(z=f(x,y)\)</span>，点P(x,y)，若<span class="math inline">\(\Delta z=f(x+\Delta x,y+\Deltay)\)</span>可表示为<span class="math inline">\(\Delta z=A\Deltax+B\Delta y+o(\rho)\)</span>，其中<span class="math inline">\(A=\frac{\partial z}{\partial x},B=\frac{\partialz}{\partial y},\rho=\sqrt{(\Delta x)^2+(\Delta y)^2}\)</span>,则<span class="math inline">\(f(x,y)\)</span>在<span class="math inline">\((x,y)\)</span>处可微<span class="math inline">\(\;\)</span>,其中全微分为其线性部分<span class="math inline">\(dz=A\Delta x+B\Delta y\)</span></li><li>可微则<span class="math inline">\(z=f(x,y)\)</span>可偏导,且偏导在(x,y)处连续,同时称为连续可微例子:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111350391-1777238050.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111358851-1283366244.png" alt="img"></li><li>隐函数的偏导数:<ul><li>对<span class="math inline">\(P_0(x_0,y_0)\)</span>,设<span class="math inline">\(F(P_0)=0\)</span>,则存在唯一的<span class="math inline">\(y=f(x)\)</span>,使得<span class="math inline">\(F(x,f(x))=0\)</span>,<span class="math inline">\(f\)</span>连续可微,<span class="math inline">\(f(x_0)=y_0\)</span>且<span class="math inline">\(f&#39;(x)=-\frac{F&#39;_x(x,y)}{F&#39;_y(x,y)}\)</span></li><li>同上,对<span class="math inline">\(P_0(x_0,y_0,z_0)\)</span>,设<span class="math inline">\(F(P_0)=0\)</span>,则存在唯一的<span class="math inline">\(z=f(x,y)\)</span>,使得<span class="math inline">\(F(x,y,f(x,y))=0\)</span>,<span class="math inline">\(f\)</span>连续可微,<span class="math inline">\(f(x_0,y_0)=z_0\)</span>且<span class="math inline">\(\frac{\partial f}{\partialx}=-\frac{F&#39;_x(x,y,z)}{F&#39;_z(x,y,z)}\)</span>,<span class="math inline">\(\frac{\partial f}{\partialy}=-\frac{F&#39;_y(x,y,z)}{F&#39;_z(x,y,z)}\)</span></li><li>隐函数存在定理3<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415115102684-1663057538.png" alt="img"></li></ul></li><li>空间曲线的切线和法平面<ul><li>要点: 对曲面<span class="math inline">\(F(x,y,z)=0\)</span>, 设<span class="math inline">\(x,y,z\)</span>可化为参数方程<span class="math inline">\(x=x(t),y=y(t),z=z(t)\)</span>, 则在<span class="math inline">\(P_0(x_0,y_0,z_0)\)</span>处,曲面的法向量 ==<span class="math inline">\(\overrightarrown=(F&#39;_x,F&#39;_y,F&#39;_z)\)</span>==, 切向量为<span class="math inline">\((x&#39;(t),y&#39;(t),z&#39;(t))\)</span>,由此可推出曲线在该点的 点法式的切平面,法线</li><li>若曲线由两个方程的方程组决定<span class="math inline">\(\begin{cases}F(x,y,z)=0 \\G(x,y,z)=0\end{cases}\)</span>,则取法向量<span class="math inline">\(n_1=(F&#39;_x,F&#39;_x,F&#39;_z),n_2=(G&#39;_x,G&#39;_y,G&#39;_z)\)</span>,切向量为<span class="math inline">\(n_1*n_2\)</span></li></ul></li><li>空间曲面的切平面和法线<ul><li>若空间曲面由<span class="math inline">\(F(x,y,z)=0\)</span>表示,则同上, 法向量为<span class="math inline">\(\overrightarrown=(F&#39;_x,F&#39;_y,F&#39;_z)\)</span>, 由此求出切平面</li><li>若空间曲面由参数方程<span class="math inline">\(x=x(u,v),y=y(u,v),z=z(u,v)\)</span>表示,对<span class="math inline">\(u,v\)</span>求偏导,则法向量为<span class="math inline">\(\overrightarrown=(x&#39;_u,y&#39;_u,z&#39;_u)\times(x&#39;_v,y&#39;_v,z&#39;_v)\)</span>,由此求出切平面</li></ul></li><li>极值和条件极值:<ul><li>二元函数的泰勒公式:若<span class="math inline">\(f(x,y)\)</span>在<span class="math inline">\((x_0,y_0)\)</span>处可微,则<span class="math inline">\(f(x,y)\)</span>在<span class="math inline">\((x_0,y_0)\)</span>处的泰勒公式为<span class="math inline">\(f(x,y)=f(x_0,y_0)+f&#39;_x(x_0,y_0)(x-x_0)+f&#39;_y(x_0,y_0)(y-y_0)+\frac{1}{2}f&#39;&#39;_{xx}(\xi,\eta)(x-x_0)^2+\frac{1}{2}f&#39;&#39;_{yy}(\xi,\eta)(y-y_0)^2+\frac{1}{2}f&#39;&#39;_{xy}(\xi,\eta)(x-x_0)(y-y_0),\xi\in(x_0,x), \eta \in(y_0,y)\)</span></li><li>极值判别法1: 记<span class="math inline">\(\mu(x,y)=f&#39;_x(x,y)(x-x_0)+f&#39;_y(x,y)(y-y_0)\)</span>,则<span class="math inline">\(\mu(x,y)&gt;0\)</span>时,点<span class="math inline">\((x_0,y_0)\)</span>为极小值点;<span class="math inline">\(\mu(x,y)&lt;0\)</span>时,点<span class="math inline">\((x_0,y_0)\)</span>为极大值点;</li><li>极值判别法2: 当<span class="math inline">\(f&#39;_x(x_0,y_0)=f&#39;_y(x_0,y_0)=0\)</span>时,令<span class="math inline">\(A=f&#39;&#39;_{xx}(x_0,y_0),B=f&#39;&#39;_{xy}(x_0,y_0),C=f&#39;&#39;_{yy}(x_0,y_0)\)</span>;<br>  由于<span class="math inline">\(f(x,y)-f(x_0,y_0)=f&#39;_x(x_0,y_0)\Deltax+f&#39;_y(x_0,y_0)\Deltay+\frac{1}{2}(f&#39;&#39;_{xx}(\xi,\eta)(\Deltax)^2+2f&#39;&#39;_{xy}(\xi,\eta)(\Delta x\Deltay)+f&#39;&#39;_{yy}(x_0,y_0)(\Delta y)^2)\)</span>,<br>  化为一元二次方程形式: <span class="math inline">\(f(x,y)-f(x_0,y_0)\simf&#39;&#39;_{xx}(\xi,\eta)(\frac{\Delta x}{\Deltay})^2+2f&#39;&#39;_{xy}(\xi,\eta)(\frac{\Delta x}{\Deltay})+f&#39;&#39;_{yy}(x_0,y_0)\)</span>:<ul><li>则<span class="math inline">\(B^2-AC&lt;0,A&gt;0\)</span>时,点<span class="math inline">\((x_0,y_0)\)</span>为极小值点----方程无解且总值大于0<span class="math inline">\(\rightarrow f(x,y)&lt;f(x_0,y_0)\)</span>总成立;</li><li><span class="math inline">\(B^2-AC&lt;0,A&lt;0\)</span>时,点<span class="math inline">\((x_0,y_0)\)</span>为极大值点----方程无解且总值小于0<span class="math inline">\(\rightarrowf(x,y)&gt;f(x_0,y_0)\)</span>总成立;</li><li><span class="math inline">\(B^2-AC&gt;0\)</span>时,点<span class="math inline">\((x_0,y_0)\)</span>不为极值点----方程有解<span class="math inline">\(\rightarrow f(x,y)\)</span>大于或小于<span class="math inline">\(f(x_0,y_0)\)</span>;</li></ul></li><li>条件极值: 设函数<span class="math inline">\(f(x,y,z)\)</span>连续可微,函数<span class="math inline">\(\varphi(x,y,z)\)</span>连续可微,且<span class="math inline">\(f(x,y,z)\)</span>满足约束方程<span class="math inline">\(\varphi(x,y,z)=0\)</span>的条件极值在点<span class="math inline">\(P_0(x_0,y_0,z_0)\)</span>取得,令<span class="math inline">\(F(x,y,z,\lambda)=f(x,y,z)=\lambda\varphi(x,y,z)\)</span>,则<span class="math inline">\(P_0(x_0,y_0,z_0)\)</span>可由以下方程组求出:<br><span class="math inline">\(\begin{cases}F&#39;_x=f&#39;_x+\lambda\varphi&#39;_x=0\\F&#39;_x=f&#39;_y+\lambda\varphi&#39;_y=0 \\F&#39;_z=f&#39;_z+\lambda\varphi&#39;_z=0 \\F&#39;_\lambda=\varphi(x,y,z)=0\end{cases}\)</span></li></ul></li><li>最大值,最小值:<br>求驻点,计算出最大,最小值;或根据问题,只有一个驻点,且最大,最小值一定在区域内,判断边界点后,该驻点为最大,最小值点.</li><li>方向导数:<ul><li>对向量的方向余弦<span class="math inline">\(\overrightarrowl=(cos(\alpha),cos(\beta),cos(\gamma))\)</span>和函数<span class="math inline">\(f(x,y,z)\)</span>, <span class="math inline">\(f(x,y,z)\)</span>的方向导数为<span class="math inline">\(\frac{\partial f}{\partial \overrightarrowl}(x,y,z)=\frac{\partial f}{\partial x}*cos(\alpha)+\frac{\partialf}{\partial y}*cos(\beta)+\frac{\partial f}{\partialz}*cos(\gamma)\)</span>,并记<span class="math inline">\(\bigtriangledownf(P_0)=(\frac{\partial f}{\partial x},\frac{\partial f}{\partialy},\frac{\partial f}{\partial z})\)</span></li><li>求函数沿某方向变化最快,即<span class="math inline">\(|\frac{\partialf}{\partial \overrightarrow l}(x,y,z)|\)</span>最大时, 因为<span class="math inline">\(|\frac{\partial f}{\partial \overrightarrowl}(x,y,z)|=|\bigtriangledown f(P_0)||\overrightarrown|cos\theta\)</span>,则此时<span class="math inline">\(\theta=0/\pi\)</span>,<span class="math inline">\(\overrightarrow n//\overrightarrow{\bigtriangledown f(P_0)}\)</span>,即<span class="math inline">\(\overrightarrow n=\frac{\bigtriangledownf(P_0)}{|\bigtriangledown f(P_0)|}\)</span>时增长最快,<span class="math inline">\(\overrightarrow n=-\frac{\bigtriangledownf(P_0)}{|\bigtriangledown f(P_0)|}\)</span>减少最快</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学期中总结</title>
    <link href="/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="命题逻辑">命题逻辑</h1><h2 id="命题表达式">命题表达式</h2><p><span class="math inline">\(p\bigvee q,p\bigwedge q,\)</span> <span class="math inline">\(p\rightarrow q=\neg{p}\bigveeq=\neg{q}\rightarrow\neg{p}\)</span>, 其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230414234921637-1080611651.png" alt="img"> <span class="math inline">\(p\leftrightarrowq=(p\rightarrow q)\bigwedge(q\rightarrow p)\)</span> 其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001003795-592965966.png" alt="img"> 运算符优先级：<span class="math inline">\(\neg&gt;\bigwedge&gt;\bigvee&gt;\rightarrow&gt;\leftrightarrow\)</span>## 将自然语言翻译成命题表达式 一个例子：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001117304-300645479.png" alt="img"> ## 命题表达式的真值表以及永真式、矛盾式与可能式   ##逻辑等价 <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001729745-1806161999.png" alt="img"> ## 常用的逻辑等价 <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001835667-657307310.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415002002556-960422294.png" alt="img"> ## 命题逻辑公式的范式 -包含所有命题变元或其否定一次仅一次的简单合取式(<span class="math inline">\(\land\)</span>)，称为极小项； -包含所有命题变元或其否定一次仅一次的简单析取式(<span class="math inline">\(\lor\)</span>)，称为极大项； -由有限个极小项组成的析取范式称为主析取范式(和式<span class="math inline">\(\lor\)</span>)； -由有限个极大项组成的合取范式称为主合取范式(积式<span class="math inline">\(\land\)</span>)。 ## 命题逻辑的“自然演绎”规则 <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415234911544-1339122674.png" alt="img"> # 谓词逻辑及自然语言的翻译 <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416010555014-409462336.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011003550-1652528878.png" alt="img"> 注意:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011149607-965455070.png" alt="img"> <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011445893-1485446859.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011508811-697382738.png" alt="img"><br>例子: 1. <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011533931-1032413969.png" alt="img"> 2. <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011641473-1860006410.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL模板库</title>
    <link href="/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="迭代器于iterator头文件中">迭代器（于<code>&lt;iterator&gt;</code>头文件中）</h1><h2 id="种类">种类：</h2><p>1):正向迭代器，定义如下:<br>&gt;<code>容器类名::iterator  迭代器名;</code></p><p>2):常量迭代器，定义如下:&gt;<code>容器类名::const_iterator  迭代器名;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构</title>
    <link href="/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="二分查找">二分查找：</h1><h2 id="模板①">模板①：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    right = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    left = middle + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125; <br><span class="hljs-comment">//注意是先改变右值</span><br></code></pre></td></tr></table></figure><h2 id="模板②">模板②：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-comment">// +1是为了让相除结果向上取整，这个地方就是两套模板的区别之一</span><br>  <span class="hljs-type">int</span> middle = left + (right - left + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    left = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    right = middle - <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;  <br><span class="hljs-comment">//注意是先改变左值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="例一最长不下降子序列">例一：最长不下降子序列</h1><h2 id="方法一时间复杂度onlogn">方法一：<a href="https://www.cnblogs.com/itlqs/p/5743114.html">时间复杂度O(nlogn)</a></h2><p><strong>代码：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最长不下降子序列nlogn  Song </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">40005</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">40005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span>)  <span class="hljs-comment">//0个元素特判一下 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    d[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];  <span class="hljs-comment">//初始化 </span><br>    <span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i]&gt;=d[len]) d[++len]=a[i];  <span class="hljs-comment">//如果可以接在len后面就接上，如果是最长上升子序列，这里变成&gt; </span><br>        <span class="hljs-keyword">else</span>  <span class="hljs-comment">//否则就找一个最该替换的替换掉 </span><br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-built_in">upper_bound</span>(d+<span class="hljs-number">1</span>,d+len+<span class="hljs-number">1</span>,a[i])-d;  <span class="hljs-comment">//找到第一个大于它的d的下标，如果是最长上升子序列，这里变成lower_bound </span><br>            d[j]=a[i]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure> &gt; 例子：1,7,6,2,3,4<br>&gt; 结果：4<br>&gt; 解释：最长不下降子序列为1,2,3,4</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/17/hello-world/"/>
    <url>/2023/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>New Article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
