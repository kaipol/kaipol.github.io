<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微积分期中总结</title>
    <link href="/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/"/>
    <url>/2023/04/14/%E5%BE%AE%E7%A7%AF%E5%88%86%E6%9C%9F%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1>微分学</h1><ol><li>拉格朗日中值：在(a,b)的区间内，定义了$f(x)$，则有$f(x_1)-f(x_2)=f’(\xi)(x_1-x_2),\xi\in(x_1,x_2)$</li><li>若$f’‘<em>{xy}(x,y)与f’'</em>{yx}(x,y)在(x,y)处皆连续，则f’'<em>{xy}(x,y)=f’'</em>{yx}(x,y)在(x,y)，与求导次序无关$</li><li>全微分(用来代替全增量)：有函数$z=f(x,y)$，点P(x,y)，若$\Delta z=f(x+\Delta x,y+\Delta y)$可表示为$\Delta z=A\Delta x+B\Delta y+o(\rho)$，其中$A=\frac{\partial z}{\partial x},B=\frac{\partial z}{\partial y},\rho=\sqrt{(\Delta x)^2+(\Delta y)^2}$,则$f(x,y)$在$(x,y)$处可微$;$,其中全微分为其线性部分$dz=A\Delta x+B\Delta y$</li><li>可微则$z=f(x,y)$可偏导,且偏导在(x,y)处连续,同时称为连续可微<br>例子:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111350391-1777238050.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415111358851-1283366244.png" alt="img"></li><li>隐函数的偏导数:<ul><li>对$P_0(x_0,y_0)$,设$F(P_0)=0$,则存在唯一的$y=f(x)$,使得$F(x,f(x))=0$,$f$连续可微,$f(x_0)=y_0$且$f’(x)=-\frac{F’_x(x,y)}{F’_y(x,y)}$</li><li>同上,对$P_0(x_0,y_0,z_0)$,设$F(P_0)=0$,则存在唯一的$z=f(x,y)$,使得$F(x,y,f(x,y))=0$,$f$连续可微,$f(x_0,y_0)=z_0$且$\frac{\partial f}{\partial x}=-\frac{F’_x(x,y,z)}{F’_z(x,y,z)}$,$\frac{\partial f}{\partial y}=-\frac{F’_y(x,y,z)}{F’_z(x,y,z)}$</li><li>隐函数存在定理3<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415115102684-1663057538.png" alt="img"></li></ul></li><li>空间曲线的切线和法平面<ul><li>要点: 对曲面$F(x,y,z)=0$, 设$x,y,z$可化为参数方程$x=x(t),y=y(t),z=z(t)$, 则在$P_0(x_0,y_0,z_0)$处,曲面的法向量 ==$\overrightarrow n=(F’_x,F’_y,F’_z)$==, 切向量为$(x’(t),y’(t),z’(t))$ ,由此可推出曲线在该点的 点法式的切平面,法线</li><li>若曲线由两个方程的方程组决定$\begin{cases}F(x,y,z)=0 \ G(x,y,z)=0\end{cases}$,则取法向量$n_1=(F’_x,F’_x,F’_z),n_2=(G’_x,G’_y,G’_z)$,切向量为$n_1*n_2$</li></ul></li><li>空间曲面的切平面和法线<ul><li>若空间曲面由$F(x,y,z)=0$表示,则同上, 法向量为$\overrightarrow n=(F’_x,F’_y,F’_z)$, 由此求出切平面</li><li>若空间曲面由参数方程$x=x(u,v),y=y(u,v),z=z(u,v)$表示,对$u,v$求偏导,则法向量为$\overrightarrow n=(x’_u,y’_u,z’_u)\times(x’_v,y’_v,z’_v)$, 由此求出切平面</li></ul></li><li>极值和条件极值:<ul><li>二元函数的泰勒公式:若$f(x,y)$在$(x_0,y_0)$处可微,则$f(x,y)$在$(x_0,y_0)$处的泰勒公式为$f(x,y)=f(x_0,y_0)+f’<em>x(x_0,y_0)(x-x_0)+f’<em>y(x_0,y_0)(y-y_0)+\frac{1}{2}f’'</em>{xx}(\xi,\eta)(x-x_0)^2+\frac{1}{2}f’'</em>{yy}(\xi,\eta)(y-y_0)^2+\frac{1}{2}f’'_{xy}(\xi,\eta)(x-x_0)(y-y_0),\xi \in(x_0,x), \eta \in(y_0,y)$</li><li>极值判别法1: 记$\mu(x,y)=f’_x(x,y)(x-x_0)+f’_y(x,y)(y-y_0)$,则$\mu(x,y)&gt;0$时,点$(x_0,y_0)$为极小值点;$\mu(x,y)&lt;0$时,点$(x_0,y_0)$为极大值点;</li><li>极值判别法2: 当$f’<em>x(x_0,y_0)=f’<em>y(x_0,y_0)=0$时,令$A=f’'</em>{xx}(x_0,y_0),B=f’'</em>{xy}(x_0,y_0),C=f’‘<em>{yy}(x_0,y_0)$;<br>  由于$f(x,y)-f(x_0,y_0)=f’<em>x(x_0,y_0)\Delta x+f’<em>y(x_0,y_0)\Delta y+\frac{1}{2}(f’'</em>{xx}(\xi,\eta)(\Delta x)^2+2f’'</em>{xy}(\xi,\eta)(\Delta x\Delta y)+f’'</em>{yy}(x_0,y_0)(\Delta y)^2)$,<br>  化为一元二次方程形式: $f(x,y)-f(x_0,y_0)\sim f’‘<em>{xx}(\xi,\eta)(\frac{\Delta x}{\Delta y})^2+2f’'</em>{xy}(\xi,\eta)(\frac{\Delta x}{\Delta y})+f’'_{yy}(x_0,y_0)$:<ul><li>则$B^2-AC&lt;0,A&gt;0$时,点$(x_0,y_0)$为极小值点----方程无解且总值大于0$\rightarrow f(x,y)&lt;f(x_0,y_0)$总成立 ;</li><li>$B^2-AC&lt;0,A&lt;0$时,点$(x_0,y_0)$为极大值点----方程无解且总值小于0$\rightarrow f(x,y)&gt;f(x_0,y_0)$总成立;</li><li>$B^2-AC&gt;0$时,点$(x_0,y_0)$不为极值点----方程有解$\rightarrow f(x,y)$大于或小于$f(x_0,y_0)$;</li></ul></li><li>条件极值: 设函数$f(x,y,z)$连续可微,函数$\varphi(x,y,z)$连续可微,且$f(x,y,z)$满足约束方程$\varphi(x,y,z)=0$的条件极值在点$P_0(x_0,y_0,z_0)$取得,令$F(x,y,z,\lambda)=f(x,y,z)=\lambda \varphi(x,y,z)$,则$P_0(x_0,y_0,z_0)$可由以下方程组求出:<br>$\begin{cases}F’_x=f’_x+\lambda\varphi’_x=0\ F’_x=f’_y+\lambda\varphi’_y=0 \ F’_z=f’_z+\lambda\varphi’<em>z=0 \ F’</em>\lambda=\varphi(x,y,z)=0\end{cases}$</li></ul></li><li>最大值,最小值:<br>求驻点,计算出最大,最小值;或根据问题,只有一个驻点,且最大,最小值一定在区域内,判断边界点后,该驻点为最大, 最小值点.</li><li>方向导数:<ul><li>对向量的方向余弦$\overrightarrow l=(cos(\alpha),cos(\beta),cos(\gamma))$和函数$f(x,y,z)$,  $f(x,y,z)$的方向导数为$\frac{\partial f}{\partial \overrightarrow l}(x,y,z)=\frac{\partial f}{\partial x}*cos(\alpha)+\frac{\partial f}{\partial y}*cos(\beta)+\frac{\partial f}{\partial z}*cos(\gamma)$,并记$\bigtriangledown f(P_0)=(\frac{\partial f}{\partial x},\frac{\partial f}{\partial y},\frac{\partial f}{\partial z})$</li><li>求函数沿某方向变化最快,即$|\frac{\partial f}{\partial \overrightarrow l}(x,y,z)|$最大时,  因为$|\frac{\partial f}{\partial \overrightarrow l}(x,y,z)|=|\bigtriangledown f(P_0)||\overrightarrow n|cos\theta$,则此时$\theta=0/\pi$,$\overrightarrow n//\overrightarrow {\bigtriangledown f(P_0)}$,即$\overrightarrow n=\frac{\bigtriangledown f(P_0)}{|\bigtriangledown f(P_0)|}$时增长最快,$\overrightarrow n=-\frac{\bigtriangledown f(P_0)}{|\bigtriangledown f(P_0)|}$减少最快</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学期中总结</title>
    <link href="/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/14/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1>命题逻辑</h1><h2 id="命题表达式">命题表达式</h2><p>$p\bigvee q,p\bigwedge q,$<br>$p\rightarrow q=\neg{p}\bigvee q=\neg{q}\rightarrow\neg{p}$,<br>其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230414234921637-1080611651.png" alt="img"><br>$p\leftrightarrow q=(p\rightarrow q)\bigwedge(q\rightarrow p)$<br>其真值表如下：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001003795-592965966.png" alt="img"><br>运算符优先级：$\neg&gt;\bigwedge&gt;\bigvee&gt;\rightarrow&gt;\leftrightarrow$</p><h2 id="将自然语言翻译成命题表达式">将自然语言翻译成命题表达式</h2><p>一个例子：<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001117304-300645479.png" alt="img"></p><h2 id="命题表达式的真值表以及永真式、矛盾式与可能式">命题表达式的真值表以及永真式、矛盾式与可能式</h2><p> </p><h2 id="逻辑等价">逻辑等价</h2><p><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001729745-1806161999.png" alt="img"></p><h2 id="常用的逻辑等价">常用的逻辑等价</h2><p><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415001835667-657307310.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415002002556-960422294.png" alt="img"></p><h2 id="命题逻辑公式的范式">命题逻辑公式的范式</h2><ul><li>包含所有命题变元或其否定一次仅一次的简单合取式($\land$)，称为极小项；</li><li>包含所有命题变元或其否定一次仅一次的简单析取式($\lor$)，称为极大项；</li><li>由有限个极小项组成的析取范式称为主析取范式(和式$\lor$)；</li><li>由有限个极大项组成的合取范式称为主合取范式(积式$\land$)。</li></ul><h2 id="命题逻辑的“自然演绎”规则">命题逻辑的“自然演绎”规则</h2><p><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230415234911544-1339122674.png" alt="img"></p><h1>谓词逻辑及自然语言的翻译</h1><p><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416010555014-409462336.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011003550-1652528878.png" alt="img"><br>注意:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011149607-965455070.png" alt="img"><br><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011445893-1485446859.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011508811-697382738.png" alt="img"><br>例子:<br>1.<br><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011533931-1032413969.png" alt="img"><br>2.<br><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416011641473-1860006410.png" alt="img"><br>注意:全称量词一般用蕴含$\rightarrow$,存在量词一般用合取$\land$(因为若条件为假,则语句为真,此时可能对)</p><h1>证明方法</h1><p><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416102326832-1516375779.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416102342500-813764848.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416102438280-397179033.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416102754908-2054669560.png" alt="img"></p><h1>集合及其运算</h1><ol><li>幂集:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105002013-1734052406.png" alt="img">,  若$|A|=n$,则$|P(A)|=2^n$</li><li>集合的运算:交,并,补<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105133442-2007149811.png" alt="img">,<br>对称差:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105202441-1506010215.png" alt="img"><br>性质:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105426126-1647572814.png" alt="img"><br><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105454763-1254623861.png" alt="img"></li><li>自然数的定义:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105727907-393209761.png" alt="img"></li><li>特殊例子:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105750799-701287542.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416110219916-1461500857.png" alt="img"></li><li>笛卡尔积:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105837181-458156926.png" alt="img"></li><li>集合等式的证明:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416105930699-1082352792.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416110055821-1136085463.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416110119940-987077219.png" alt="img"></li></ol><h1>关系及其运算</h1><ol><li>特殊的关系:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416110738643-24549801.png" alt="img"></li><li>关系的运算:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416110916133-621856307.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111059583-155636464.png" alt="img"><br>重点: 关系的复合:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111150540-1369188229.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111210637-960567357.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111222376-1018415828.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111318368-1202425992.png" alt="img"></li><li>0-1矩阵运算(成员表):<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111358639-399259368.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111828440-1676795162.png" alt="img"></li><li>关系的性质:</li></ol><ul><li>自反性:注意自反(对$\forall a\in A$),反自反,非自反的关系<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111912977-55194360.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416111939394-1402906185.png" alt="img"></li><li>:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112254132-2129446923.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112358770-710730787.png" alt="img"> :前提不满足,则后续不用证明,结论为真<br><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112448120-1099993885.png" alt="img"> <img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112652719-1409958179.png" alt="img"></li><li>传递性:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112711850-986637380.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416112730494-826818473.png" alt="img"><img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416113028040-1714076869.png" alt="img"></li></ul><ol start="5"><li>关系的运算与性质的保持:<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416113159812-66280532.png" alt="img"></li></ol><h1>函数及其运算</h1><ol><li>定义:定义域,伴域,值域,像,原像<img src="https://img2023.cnblogs.com/blog/3125312/202304/3125312-20230416113353635-719112230.png" alt="img"></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>离散数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL模板库</title>
    <link href="/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <url>/2023/01/31/C-STL%E6%A8%A1%E6%9D%BF%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1>迭代器（于<code>&lt;iterator&gt;</code>头文件中）</h1><h2 id="种类：">种类：</h2><p>1):正向迭代器，定义如下:</p><blockquote><p><code>容器类名::iterator  迭代器名;</code></p></blockquote><p>2):常量迭代器，定义如下:</p><blockquote><p><code>容器类名::const_iterator  迭代器名;</code></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据结构</title>
    <link href="/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/01/21/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1>二分查找：</h1><h2 id="模板①：">模板①：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    right = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    left = middle + <span class="hljs-number">1</span>;<br>  &#125;<br>&#125; <br><span class="hljs-comment">//注意是先改变右值</span><br></code></pre></td></tr></table></figure><h2 id="模板②：">模板②：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>  <span class="hljs-comment">// +1是为了让相除结果向上取整，这个地方就是两套模板的区别之一</span><br>  <span class="hljs-type">int</span> middle = left + (right - left + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (满足XXX) &#123;<br>    left = middle;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    right = middle - <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;  <br><span class="hljs-comment">//注意是先改变左值</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2023/01/21/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1>例一：最长不下降子序列</h1><h2 id="方法一：时间复杂度O-nlogn">方法一：<a href="https://www.cnblogs.com/itlqs/p/5743114.html">时间复杂度O(nlogn)</a></h2><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//最长不下降子序列nlogn  Song </span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> a[<span class="hljs-number">40005</span>];<br><span class="hljs-type">int</span> d[<span class="hljs-number">40005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">0</span>)  <span class="hljs-comment">//0个元素特判一下 </span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    d[<span class="hljs-number">1</span>]=a[<span class="hljs-number">1</span>];  <span class="hljs-comment">//初始化 </span><br>    <span class="hljs-type">int</span> len=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i]&gt;=d[len]) d[++len]=a[i];  <span class="hljs-comment">//如果可以接在len后面就接上，如果是最长上升子序列，这里变成&gt; </span><br>        <span class="hljs-keyword">else</span>  <span class="hljs-comment">//否则就找一个最该替换的替换掉 </span><br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-built_in">upper_bound</span>(d+<span class="hljs-number">1</span>,d+len+<span class="hljs-number">1</span>,a[i])-d;  <span class="hljs-comment">//找到第一个大于它的d的下标，如果是最长上升子序列，这里变成lower_bound </span><br>            d[j]=a[i]; <br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>例子：1,7,6,2,3,4<br>结果：4<br>解释：最长不下降子序列为1,2,3,4</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/17/hello-world/"/>
    <url>/2023/01/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>New Article</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
